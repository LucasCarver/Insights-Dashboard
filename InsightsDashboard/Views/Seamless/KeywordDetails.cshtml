@model KeywordDetailsAndOccurrences
<h2>
    @Model.KeywordDetails.Key.Substring(0, 1).ToUpper()@Model.KeywordDetails.Key.Substring(1, Model.KeywordDetails.Key.Length - 1)
    | @Model.KeywordDetails.Value mentions
</h2>

<table class="table-striped" style="width:100%">
    <tr>
        <th>
            Add Date
        </th>
        <th style="width:8%">
            Startup
        </th>
        <th>
            Themes
        </th>
        <th>
            Alignment
        </th>
        <th style="width:3%"></th>
        <th style="text-align:center">
            Raised
        </th>
    </tr>
    @foreach (var item in Model.Occurrences)
    {
        <tr>
            <td>
                @item.Value.DateAdded
            </td>
            <td>
                <a href="/Seamless/SeamlessStartupDetails?key=@item.Key">@item.Value.CompanyName</a>
            </td>
            <td>
                @item.Value.Themes
            </td>
            <td>
                @{
                    if (item.Value.Alignment != null)
                    {
                        string[] s = item.Value.Alignment.Split(' ', ',', '/');
                        foreach (string x in s)
                        {
                            { 
                                <a>@x </a>
                            } 
                        }
                    }
                }
            </td>
            @if (item.Value.Raised.ToLower() != "undisclosed" && item.Value.Raised != "" && item.Value.Raised != null)
            {
                <td style="text-align:right; width:1%">$</td>
            }
            else
            {
                <td></td>
            }
            <td style="text-align:right">
                @item.Value.Raised
            </td>
        </tr>
    }

    @{
        int totalRaised = 0;
    }
    @foreach (var item in Model.Occurrences.Values)
    {
        string wholeRaised = "";
        if (item.Raised == "Undisclosed" || item.Raised == null)
        {
            continue;
        }
        if (item.Raised.Contains(','))
        {
            List<string> raisedTemp = item.Raised.Split(',').ToList();
            foreach (string piece in raisedTemp)
            {
                wholeRaised += piece;
            }
        }
        else
        {
            wholeRaised = item.Raised;
        }
        if (int.TryParse(wholeRaised, out int o))
        {
            totalRaised += o;
        }
    }
    @if (totalRaised > 0)
    {
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td style="text-align:right">Total Raised:</td>
            <td style="text-align:right"><b>$</b></td>
            <td style="text-align:right">
                <b>@totalRaised.ToString("n0")</b>
            </td>
        </tr>
    }
</table>

@{
    Dictionary<string, int> themeHolder = new Dictionary<string, int>();
    themeHolder.Add("Health Beyond the Hospital", 0);
    themeHolder.Add("Robust Future", 0);
    themeHolder.Add("The Good Life", 0);
}
@foreach (var item in Model.Occurrences.Values)
{
    if (item.Themes.Contains("Hospital"))
    {
        themeHolder["Health Beyond the Hospital"] += 1;
    }
    if (item.Themes.Contains("Robust"))
    {
        themeHolder["Robust Future"] += 1;
    }
    if (item.Themes.Contains("Good"))
    {
        themeHolder["The Good Life"] += 1;
    }
}
<div style="display:flex; justify-content:space-between">
    <div style="padding-left:10.5em">
        <h2>Theme Distribution</h2>
    </div>
    <div style="padding-right:10.5em">
        <h2>Alignment Distribution</h2>
    </div>
</div>
<div style="display:flex; padding-left:9.5em; padding-right:13.5em; justify-content:space-between">
    <table class="table-bordered" style="width:35%">
        <tr>
            <th>Theme</th>
            <th style="text-align:left">Frequency</th>
        </tr>
        @foreach (KeyValuePair<string, int> kvp in themeHolder)
        {
            <tr>
                <td>
                    @kvp.Key
                </td>
                <td style="text-align:center">
                    @kvp.Value
                </td>
            </tr>
        }
    </table>
    <table class="table-bordered" style="width:23%">
        @{
            List<string> alignments = new List<string>();
            Dictionary<string, int> alignmentHolder = new Dictionary<string, int>();
            @foreach (var item in Model.Occurrences.Values)
            {
                if (item.Alignment != null)
                {
                    foreach (var tempAlignment in item.Alignment.Split(", ".ToCharArray()).ToList())
                    {
                        alignments.Add(tempAlignment);
                    }
                }
            }
            @foreach (string alignment in alignments)
            {
                if (!alignmentHolder.ContainsKey(alignment))
                {
                    if (alignment != "")
                    {
                        alignmentHolder.Add(alignment, 1);
                    }
                }
                else
                {
                    alignmentHolder[alignment] += 1;
                }
            }
            @if (alignmentHolder.Count != 0)
            {
                <tr>
                    <th>
                        Alignment
                    </th>
                    <th>
                        Frequency
                    </th>
                </tr>
                @foreach (var entry in alignmentHolder)
                {
                    <tr>
                        <td>
                            <a href="/Seamless/AlignmentDetails?alignment=@entry.Key">@entry.Key</a>
                        </td>
                        <td style="text-align:center">
                            @entry.Value
                        </td>
                    </tr>
                }
            }
        }
    </table>

</div>